/*
 * Created by Maksim Paramonov on 22.03.2021.
*/
#include <iostream>

#include "Car.h"
#include "PassengerCar.h"
#include "Bus.h"
#include "Minivan.h"

using namespace std;

int main() {
    // Ex 1. Создать абстрактный класс Figure (фигура). Его наследниками являются классы Parallelogram (параллелограмм)
    // и Circle (круг). Класс Parallelogram — базовый для классов Rectangle (прямоугольник), Square (квадрат),
    // Rhombus (ромб). Для всех классов создать конструкторы. Для класса Figure добавить
    // чисто виртуальную функцию area() (площадь). Во всех остальных классах переопределить эту функцию,
    // исходя из геометрических формул нахождения площади.

    // Ex 2. Создать класс Car (автомобиль) с полями company (компания) и model (модель).
    // Классы-наследники: PassengerCar (легковой автомобиль) и Bus (автобус).
    // От этих классов наследует класс Minivan (минивэн). Создать конструкторы для каждого из классов,
    // чтобы они выводили данные о классах. Создать объекты для каждого из классов и посмотреть,
    // в какой последовательности выполняются конструкторы. Обратить внимание на проблему «алмаз смерти».
    //
    // Примечание: если использовать виртуальный базовый класс, то объект самого "верхнего" базового класса создает
    // самый "дочерний" класс.

    Car car1 = Car("car1", "car1");
    Car car2 = PassengerCar("car2", "car2");
    Car car3 = Bus("car3", "car3");
    Car car4 = Minivan("car4", "car4");


    // Ex 3. Создать класс: Fraction (дробь). Дробь имеет числитель и знаменатель (например, 3/7 или 9/2). Предусмотреть, чтобы знаменатель не был равен 0. Перегрузить:
    // математические бинарные операторы (+, -, *, /) для выполнения действий с дробями
    // унарный оператор (-)
    // логические операторы сравнения двух дробей (==, !=, <, >, <=, >=).
    // Примечание: Поскольку операторы < и >=, > и <= — это логические противоположности, попробуйте перегрузить один через другой.
    // Продемонстрировать использование перегруженных операторов.

    // Ex 4. Создать класс Card, описывающий карту в игре БлэкДжек. У этого класса должно быть три поля:
    // масть, значение карты и положение карты (вверх лицом или рубашкой). Сделать поля масть и значение карты
    // типом перечисления (enum). Положение карты - тип bool. Также в этом классе должно быть два метода:
    // метод Flip(), который переворачивает карту, т.е. если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот.
    // метод GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.
    return EXIT_SUCCESS;
}
